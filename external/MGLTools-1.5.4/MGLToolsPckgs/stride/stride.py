# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _stride
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


BREAKDIST = _stride.BREAKDIST
SSDIST = _stride.SSDIST
SUCCESS = _stride.SUCCESS
FAILURE = _stride.FAILURE
YES = _stride.YES
NO = _stride.NO
ERR = _stride.ERR
BUFSZ = _stride.BUFSZ
MAX_FIELD = _stride.MAX_FIELD
MAX_AtomType = _stride.MAX_AtomType
MAX_ResType = _stride.MAX_ResType
MAXNONSTAND = _stride.MAXNONSTAND
MAX_CHAIN = _stride.MAX_CHAIN
MAX_RES = _stride.MAX_RES
MAX_HETRES = _stride.MAX_HETRES
MAX_HET = _stride.MAX_HET
MAX_HELIX = _stride.MAX_HELIX
MAX_SHEET = _stride.MAX_SHEET
MAX_STRAND_IN_SHEET = _stride.MAX_STRAND_IN_SHEET
MAX_TURN = _stride.MAX_TURN
MAX_BOND = _stride.MAX_BOND
MAX_ASSIGN = _stride.MAX_ASSIGN
MAX_INFO = _stride.MAX_INFO
MAX_AT_IN_RES = _stride.MAX_AT_IN_RES
MAX_AT_IN_HETERORES = _stride.MAX_AT_IN_HETERORES
MAXRESDNR = _stride.MAXRESDNR
MAXRESACC = _stride.MAXRESACC
RES_FIELD = _stride.RES_FIELD
AT_FIELD = _stride.AT_FIELD
MAX_X = _stride.MAX_X
MAX_Y = _stride.MAX_Y
MAX_Z = _stride.MAX_Z
MIN_X = _stride.MIN_X
MIN_Y = _stride.MIN_Y
MIN_Z = _stride.MIN_Z
MAX_Occupancy = _stride.MAX_Occupancy
MIN_Occupancy = _stride.MIN_Occupancy
MAX_TempFactor = _stride.MAX_TempFactor
MIN_TempFactor = _stride.MIN_TempFactor
OUTPUTWIDTH = _stride.OUTPUTWIDTH
MAXCONDITIONS = _stride.MAXCONDITIONS
MAXHYDRBOND = _stride.MAXHYDRBOND
MAXDONOR = _stride.MAXDONOR
MAXACCEPTOR = _stride.MAXACCEPTOR
MINPHIPSI = _stride.MINPHIPSI
MAXPHIPSI = _stride.MAXPHIPSI
DEFNUMPIXEL = _stride.DEFNUMPIXEL
DIST_N_H = _stride.DIST_N_H
RmGRID = _stride.RmGRID
EmGRID = _stride.EmGRID
MINACCANG_SP2 = _stride.MINACCANG_SP2
MAXACCANG_SP2 = _stride.MAXACCANG_SP2
MINACCANG_SP3 = _stride.MINACCANG_SP3
MAXACCANG_SP3 = _stride.MAXACCANG_SP3
MINDONANG_SP2 = _stride.MINDONANG_SP2
MAXDONANG_SP2 = _stride.MAXDONANG_SP2
MINDONANG_SP3 = _stride.MINDONANG_SP3
MAXDONANG_SP3 = _stride.MAXDONANG_SP3
ACCDONANG = _stride.ACCDONANG
DONACCANG = _stride.DONACCANG
NAcd = _stride.NAcd
Stride = _stride.Stride
Pdb = _stride.Pdb
Dssp = _stride.Dssp
XRay = _stride.XRay
NMR = _stride.NMR
Model = _stride.Model
Nsp2 = _stride.Nsp2
Nsp3 = _stride.Nsp3
Osp2 = _stride.Osp2
Osp3 = _stride.Osp3
Ssp3 = _stride.Ssp3
Peptide = _stride.Peptide
Trp = _stride.Trp
Asn = _stride.Asn
Gln = _stride.Gln
Arg = _stride.Arg
His = _stride.His
Lys = _stride.Lys
Ser = _stride.Ser
Thr = _stride.Thr
Tyr = _stride.Tyr
Asp = _stride.Asp
Glu = _stride.Glu
Met = _stride.Met
Cys = _stride.Cys
MM = _stride.MM
MS = _stride.MS
SM = _stride.SM
SS = _stride.SS
MAX_FILE = _stride.MAX_FILE
class CHAINLIST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHAINLIST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHAINLIST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FileName"] = _stride.CHAINLIST_FileName_set
    __swig_getmethods__["FileName"] = _stride.CHAINLIST_FileName_get
    if _newclass:FileName = _swig_property(_stride.CHAINLIST_FileName_get, _stride.CHAINLIST_FileName_set)
    __swig_setmethods__["ChainId"] = _stride.CHAINLIST_ChainId_set
    __swig_getmethods__["ChainId"] = _stride.CHAINLIST_ChainId_get
    if _newclass:ChainId = _swig_property(_stride.CHAINLIST_ChainId_get, _stride.CHAINLIST_ChainId_set)
    def __init__(self, *args): 
        this = _stride.new_CHAINLIST(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_CHAINLIST
    __del__ = lambda self : None;
CHAINLIST_swigregister = _stride.CHAINLIST_swigregister
CHAINLIST_swigregister(CHAINLIST)

class PROPERTY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PROPERTY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PROPERTY, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Phi"] = _stride.PROPERTY_Phi_set
    __swig_getmethods__["Phi"] = _stride.PROPERTY_Phi_get
    if _newclass:Phi = _swig_property(_stride.PROPERTY_Phi_get, _stride.PROPERTY_Phi_set)
    __swig_setmethods__["Psi"] = _stride.PROPERTY_Psi_set
    __swig_getmethods__["Psi"] = _stride.PROPERTY_Psi_get
    if _newclass:Psi = _swig_property(_stride.PROPERTY_Psi_get, _stride.PROPERTY_Psi_set)
    __swig_setmethods__["Omega"] = _stride.PROPERTY_Omega_set
    __swig_getmethods__["Omega"] = _stride.PROPERTY_Omega_get
    if _newclass:Omega = _swig_property(_stride.PROPERTY_Omega_get, _stride.PROPERTY_Omega_set)
    __swig_setmethods__["PhiZn"] = _stride.PROPERTY_PhiZn_set
    __swig_getmethods__["PhiZn"] = _stride.PROPERTY_PhiZn_get
    if _newclass:PhiZn = _swig_property(_stride.PROPERTY_PhiZn_get, _stride.PROPERTY_PhiZn_set)
    __swig_setmethods__["PsiZn"] = _stride.PROPERTY_PsiZn_set
    __swig_getmethods__["PsiZn"] = _stride.PROPERTY_PsiZn_get
    if _newclass:PsiZn = _swig_property(_stride.PROPERTY_PsiZn_get, _stride.PROPERTY_PsiZn_set)
    __swig_setmethods__["Solv"] = _stride.PROPERTY_Solv_set
    __swig_getmethods__["Solv"] = _stride.PROPERTY_Solv_get
    if _newclass:Solv = _swig_property(_stride.PROPERTY_Solv_get, _stride.PROPERTY_Solv_set)
    __swig_setmethods__["DsspSolv"] = _stride.PROPERTY_DsspSolv_set
    __swig_getmethods__["DsspSolv"] = _stride.PROPERTY_DsspSolv_get
    if _newclass:DsspSolv = _swig_property(_stride.PROPERTY_DsspSolv_get, _stride.PROPERTY_DsspSolv_set)
    __swig_setmethods__["Asn"] = _stride.PROPERTY_Asn_set
    __swig_getmethods__["Asn"] = _stride.PROPERTY_Asn_get
    if _newclass:Asn = _swig_property(_stride.PROPERTY_Asn_get, _stride.PROPERTY_Asn_set)
    __swig_setmethods__["PdbAsn"] = _stride.PROPERTY_PdbAsn_set
    __swig_getmethods__["PdbAsn"] = _stride.PROPERTY_PdbAsn_get
    if _newclass:PdbAsn = _swig_property(_stride.PROPERTY_PdbAsn_get, _stride.PROPERTY_PdbAsn_set)
    __swig_setmethods__["DsspAsn"] = _stride.PROPERTY_DsspAsn_set
    __swig_getmethods__["DsspAsn"] = _stride.PROPERTY_DsspAsn_get
    if _newclass:DsspAsn = _swig_property(_stride.PROPERTY_DsspAsn_get, _stride.PROPERTY_DsspAsn_set)
    def __init__(self, *args): 
        this = _stride.new_PROPERTY(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_PROPERTY
    __del__ = lambda self : None;
PROPERTY_swigregister = _stride.PROPERTY_swigregister
PROPERTY_swigregister(PROPERTY)

class INVOLVED(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INVOLVED, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INVOLVED, name)
    __repr__ = _swig_repr
    __swig_setmethods__["HBondDnr"] = _stride.INVOLVED_HBondDnr_set
    __swig_getmethods__["HBondDnr"] = _stride.INVOLVED_HBondDnr_get
    if _newclass:HBondDnr = _swig_property(_stride.INVOLVED_HBondDnr_get, _stride.INVOLVED_HBondDnr_set)
    __swig_setmethods__["HBondAcc"] = _stride.INVOLVED_HBondAcc_set
    __swig_getmethods__["HBondAcc"] = _stride.INVOLVED_HBondAcc_get
    if _newclass:HBondAcc = _swig_property(_stride.INVOLVED_HBondAcc_get, _stride.INVOLVED_HBondAcc_set)
    __swig_setmethods__["NBondDnr"] = _stride.INVOLVED_NBondDnr_set
    __swig_getmethods__["NBondDnr"] = _stride.INVOLVED_NBondDnr_get
    if _newclass:NBondDnr = _swig_property(_stride.INVOLVED_NBondDnr_get, _stride.INVOLVED_NBondDnr_set)
    __swig_setmethods__["NBondAcc"] = _stride.INVOLVED_NBondAcc_set
    __swig_getmethods__["NBondAcc"] = _stride.INVOLVED_NBondAcc_get
    if _newclass:NBondAcc = _swig_property(_stride.INVOLVED_NBondAcc_get, _stride.INVOLVED_NBondAcc_set)
    __swig_setmethods__["InterchainHBonds"] = _stride.INVOLVED_InterchainHBonds_set
    __swig_getmethods__["InterchainHBonds"] = _stride.INVOLVED_InterchainHBonds_get
    if _newclass:InterchainHBonds = _swig_property(_stride.INVOLVED_InterchainHBonds_get, _stride.INVOLVED_InterchainHBonds_set)
    def __init__(self, *args): 
        this = _stride.new_INVOLVED(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_INVOLVED
    __del__ = lambda self : None;
INVOLVED_swigregister = _stride.INVOLVED_swigregister
INVOLVED_swigregister(INVOLVED)

class RESIDUE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RESIDUE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RESIDUE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NAtom"] = _stride.RESIDUE_NAtom_set
    __swig_getmethods__["NAtom"] = _stride.RESIDUE_NAtom_get
    if _newclass:NAtom = _swig_property(_stride.RESIDUE_NAtom_get, _stride.RESIDUE_NAtom_set)
    __swig_setmethods__["PDB_ResNumb"] = _stride.RESIDUE_PDB_ResNumb_set
    __swig_getmethods__["PDB_ResNumb"] = _stride.RESIDUE_PDB_ResNumb_get
    if _newclass:PDB_ResNumb = _swig_property(_stride.RESIDUE_PDB_ResNumb_get, _stride.RESIDUE_PDB_ResNumb_set)
    __swig_setmethods__["ResType"] = _stride.RESIDUE_ResType_set
    __swig_getmethods__["ResType"] = _stride.RESIDUE_ResType_get
    if _newclass:ResType = _swig_property(_stride.RESIDUE_ResType_get, _stride.RESIDUE_ResType_set)
    __swig_setmethods__["AtomType"] = _stride.RESIDUE_AtomType_set
    __swig_getmethods__["AtomType"] = _stride.RESIDUE_AtomType_get
    if _newclass:AtomType = _swig_property(_stride.RESIDUE_AtomType_get, _stride.RESIDUE_AtomType_set)
    __swig_setmethods__["Coord"] = _stride.RESIDUE_Coord_set
    __swig_getmethods__["Coord"] = _stride.RESIDUE_Coord_get
    if _newclass:Coord = _swig_property(_stride.RESIDUE_Coord_get, _stride.RESIDUE_Coord_set)
    __swig_setmethods__["Occupancy"] = _stride.RESIDUE_Occupancy_set
    __swig_getmethods__["Occupancy"] = _stride.RESIDUE_Occupancy_get
    if _newclass:Occupancy = _swig_property(_stride.RESIDUE_Occupancy_get, _stride.RESIDUE_Occupancy_set)
    __swig_setmethods__["TempFactor"] = _stride.RESIDUE_TempFactor_set
    __swig_getmethods__["TempFactor"] = _stride.RESIDUE_TempFactor_get
    if _newclass:TempFactor = _swig_property(_stride.RESIDUE_TempFactor_get, _stride.RESIDUE_TempFactor_set)
    __swig_setmethods__["Prop"] = _stride.RESIDUE_Prop_set
    __swig_getmethods__["Prop"] = _stride.RESIDUE_Prop_get
    if _newclass:Prop = _swig_property(_stride.RESIDUE_Prop_get, _stride.RESIDUE_Prop_set)
    __swig_setmethods__["Inv"] = _stride.RESIDUE_Inv_set
    __swig_getmethods__["Inv"] = _stride.RESIDUE_Inv_get
    if _newclass:Inv = _swig_property(_stride.RESIDUE_Inv_get, _stride.RESIDUE_Inv_set)
    def _Coord(*args): return _stride.RESIDUE__Coord(*args)
    def getAtomType(*args): return _stride.RESIDUE_getAtomType(*args)
    def __init__(self, *args): 
        this = _stride.new_RESIDUE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_RESIDUE
    __del__ = lambda self : None;
RESIDUE_swigregister = _stride.RESIDUE_swigregister
RESIDUE_swigregister(RESIDUE)

class HETERORESIDUE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HETERORESIDUE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HETERORESIDUE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NAtom"] = _stride.HETERORESIDUE_NAtom_set
    __swig_getmethods__["NAtom"] = _stride.HETERORESIDUE_NAtom_get
    if _newclass:NAtom = _swig_property(_stride.HETERORESIDUE_NAtom_get, _stride.HETERORESIDUE_NAtom_set)
    __swig_setmethods__["PDB_ResNumb"] = _stride.HETERORESIDUE_PDB_ResNumb_set
    __swig_getmethods__["PDB_ResNumb"] = _stride.HETERORESIDUE_PDB_ResNumb_get
    if _newclass:PDB_ResNumb = _swig_property(_stride.HETERORESIDUE_PDB_ResNumb_get, _stride.HETERORESIDUE_PDB_ResNumb_set)
    __swig_setmethods__["ResType"] = _stride.HETERORESIDUE_ResType_set
    __swig_getmethods__["ResType"] = _stride.HETERORESIDUE_ResType_get
    if _newclass:ResType = _swig_property(_stride.HETERORESIDUE_ResType_get, _stride.HETERORESIDUE_ResType_set)
    __swig_setmethods__["AtomType"] = _stride.HETERORESIDUE_AtomType_set
    __swig_getmethods__["AtomType"] = _stride.HETERORESIDUE_AtomType_get
    if _newclass:AtomType = _swig_property(_stride.HETERORESIDUE_AtomType_get, _stride.HETERORESIDUE_AtomType_set)
    __swig_setmethods__["Mendeleev"] = _stride.HETERORESIDUE_Mendeleev_set
    __swig_getmethods__["Mendeleev"] = _stride.HETERORESIDUE_Mendeleev_get
    if _newclass:Mendeleev = _swig_property(_stride.HETERORESIDUE_Mendeleev_get, _stride.HETERORESIDUE_Mendeleev_set)
    __swig_setmethods__["Coord"] = _stride.HETERORESIDUE_Coord_set
    __swig_getmethods__["Coord"] = _stride.HETERORESIDUE_Coord_get
    if _newclass:Coord = _swig_property(_stride.HETERORESIDUE_Coord_get, _stride.HETERORESIDUE_Coord_set)
    __swig_setmethods__["Occupancy"] = _stride.HETERORESIDUE_Occupancy_set
    __swig_getmethods__["Occupancy"] = _stride.HETERORESIDUE_Occupancy_get
    if _newclass:Occupancy = _swig_property(_stride.HETERORESIDUE_Occupancy_get, _stride.HETERORESIDUE_Occupancy_set)
    __swig_setmethods__["TempFactor"] = _stride.HETERORESIDUE_TempFactor_set
    __swig_getmethods__["TempFactor"] = _stride.HETERORESIDUE_TempFactor_get
    if _newclass:TempFactor = _swig_property(_stride.HETERORESIDUE_TempFactor_get, _stride.HETERORESIDUE_TempFactor_set)
    def __init__(self, *args): 
        this = _stride.new_HETERORESIDUE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_HETERORESIDUE
    __del__ = lambda self : None;
HETERORESIDUE_swigregister = _stride.HETERORESIDUE_swigregister
HETERORESIDUE_swigregister(HETERORESIDUE)

class HET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["HetId"] = _stride.HET_HetId_set
    __swig_getmethods__["HetId"] = _stride.HET_HetId_get
    if _newclass:HetId = _swig_property(_stride.HET_HetId_get, _stride.HET_HetId_set)
    __swig_setmethods__["PDB_ResNumb"] = _stride.HET_PDB_ResNumb_set
    __swig_getmethods__["PDB_ResNumb"] = _stride.HET_PDB_ResNumb_get
    if _newclass:PDB_ResNumb = _swig_property(_stride.HET_PDB_ResNumb_get, _stride.HET_PDB_ResNumb_set)
    __swig_setmethods__["InsCode"] = _stride.HET_InsCode_set
    __swig_getmethods__["InsCode"] = _stride.HET_InsCode_get
    if _newclass:InsCode = _swig_property(_stride.HET_InsCode_get, _stride.HET_InsCode_set)
    __swig_setmethods__["AtomNumb"] = _stride.HET_AtomNumb_set
    __swig_getmethods__["AtomNumb"] = _stride.HET_AtomNumb_get
    if _newclass:AtomNumb = _swig_property(_stride.HET_AtomNumb_get, _stride.HET_AtomNumb_set)
    def __init__(self, *args): 
        this = _stride.new_HET(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_HET
    __del__ = lambda self : None;
HET_swigregister = _stride.HET_swigregister
HET_swigregister(HET)

class HELIX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HELIX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HELIX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Res1"] = _stride.HELIX_Res1_set
    __swig_getmethods__["Res1"] = _stride.HELIX_Res1_get
    if _newclass:Res1 = _swig_property(_stride.HELIX_Res1_get, _stride.HELIX_Res1_set)
    __swig_setmethods__["Res2"] = _stride.HELIX_Res2_set
    __swig_getmethods__["Res2"] = _stride.HELIX_Res2_get
    if _newclass:Res2 = _swig_property(_stride.HELIX_Res2_get, _stride.HELIX_Res2_set)
    __swig_setmethods__["PDB_ResNumb1"] = _stride.HELIX_PDB_ResNumb1_set
    __swig_getmethods__["PDB_ResNumb1"] = _stride.HELIX_PDB_ResNumb1_get
    if _newclass:PDB_ResNumb1 = _swig_property(_stride.HELIX_PDB_ResNumb1_get, _stride.HELIX_PDB_ResNumb1_set)
    __swig_setmethods__["PDB_ResNumb2"] = _stride.HELIX_PDB_ResNumb2_set
    __swig_getmethods__["PDB_ResNumb2"] = _stride.HELIX_PDB_ResNumb2_get
    if _newclass:PDB_ResNumb2 = _swig_property(_stride.HELIX_PDB_ResNumb2_get, _stride.HELIX_PDB_ResNumb2_set)
    __swig_setmethods__["InsCode1"] = _stride.HELIX_InsCode1_set
    __swig_getmethods__["InsCode1"] = _stride.HELIX_InsCode1_get
    if _newclass:InsCode1 = _swig_property(_stride.HELIX_InsCode1_get, _stride.HELIX_InsCode1_set)
    __swig_setmethods__["InsCode2"] = _stride.HELIX_InsCode2_set
    __swig_getmethods__["InsCode2"] = _stride.HELIX_InsCode2_get
    if _newclass:InsCode2 = _swig_property(_stride.HELIX_InsCode2_get, _stride.HELIX_InsCode2_set)
    __swig_setmethods__["Class"] = _stride.HELIX_Class_set
    __swig_getmethods__["Class"] = _stride.HELIX_Class_get
    if _newclass:Class = _swig_property(_stride.HELIX_Class_get, _stride.HELIX_Class_set)
    def __init__(self, *args): 
        this = _stride.new_HELIX(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_HELIX
    __del__ = lambda self : None;
HELIX_swigregister = _stride.HELIX_swigregister
HELIX_swigregister(HELIX)

class SHEET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SHEET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SHEET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NStrand"] = _stride.SHEET_NStrand_set
    __swig_getmethods__["NStrand"] = _stride.SHEET_NStrand_get
    if _newclass:NStrand = _swig_property(_stride.SHEET_NStrand_get, _stride.SHEET_NStrand_set)
    __swig_setmethods__["SheetId"] = _stride.SHEET_SheetId_set
    __swig_getmethods__["SheetId"] = _stride.SHEET_SheetId_get
    if _newclass:SheetId = _swig_property(_stride.SHEET_SheetId_get, _stride.SHEET_SheetId_set)
    __swig_setmethods__["ResType1"] = _stride.SHEET_ResType1_set
    __swig_getmethods__["ResType1"] = _stride.SHEET_ResType1_get
    if _newclass:ResType1 = _swig_property(_stride.SHEET_ResType1_get, _stride.SHEET_ResType1_set)
    __swig_setmethods__["ResType2"] = _stride.SHEET_ResType2_set
    __swig_getmethods__["ResType2"] = _stride.SHEET_ResType2_get
    if _newclass:ResType2 = _swig_property(_stride.SHEET_ResType2_get, _stride.SHEET_ResType2_set)
    __swig_setmethods__["PDB_ResNumb1"] = _stride.SHEET_PDB_ResNumb1_set
    __swig_getmethods__["PDB_ResNumb1"] = _stride.SHEET_PDB_ResNumb1_get
    if _newclass:PDB_ResNumb1 = _swig_property(_stride.SHEET_PDB_ResNumb1_get, _stride.SHEET_PDB_ResNumb1_set)
    __swig_setmethods__["PDB_ResNumb2"] = _stride.SHEET_PDB_ResNumb2_set
    __swig_getmethods__["PDB_ResNumb2"] = _stride.SHEET_PDB_ResNumb2_get
    if _newclass:PDB_ResNumb2 = _swig_property(_stride.SHEET_PDB_ResNumb2_get, _stride.SHEET_PDB_ResNumb2_set)
    __swig_setmethods__["InsCode1"] = _stride.SHEET_InsCode1_set
    __swig_getmethods__["InsCode1"] = _stride.SHEET_InsCode1_get
    if _newclass:InsCode1 = _swig_property(_stride.SHEET_InsCode1_get, _stride.SHEET_InsCode1_set)
    __swig_setmethods__["InsCode2"] = _stride.SHEET_InsCode2_set
    __swig_getmethods__["InsCode2"] = _stride.SHEET_InsCode2_get
    if _newclass:InsCode2 = _swig_property(_stride.SHEET_InsCode2_get, _stride.SHEET_InsCode2_set)
    __swig_setmethods__["Sence"] = _stride.SHEET_Sence_set
    __swig_getmethods__["Sence"] = _stride.SHEET_Sence_get
    if _newclass:Sence = _swig_property(_stride.SHEET_Sence_get, _stride.SHEET_Sence_set)
    __swig_setmethods__["RegYN"] = _stride.SHEET_RegYN_set
    __swig_getmethods__["RegYN"] = _stride.SHEET_RegYN_get
    if _newclass:RegYN = _swig_property(_stride.SHEET_RegYN_get, _stride.SHEET_RegYN_set)
    __swig_setmethods__["AtomNameReg1"] = _stride.SHEET_AtomNameReg1_set
    __swig_getmethods__["AtomNameReg1"] = _stride.SHEET_AtomNameReg1_get
    if _newclass:AtomNameReg1 = _swig_property(_stride.SHEET_AtomNameReg1_get, _stride.SHEET_AtomNameReg1_set)
    __swig_setmethods__["AtomNameReg2"] = _stride.SHEET_AtomNameReg2_set
    __swig_getmethods__["AtomNameReg2"] = _stride.SHEET_AtomNameReg2_get
    if _newclass:AtomNameReg2 = _swig_property(_stride.SHEET_AtomNameReg2_get, _stride.SHEET_AtomNameReg2_set)
    __swig_setmethods__["ResTypeReg1"] = _stride.SHEET_ResTypeReg1_set
    __swig_getmethods__["ResTypeReg1"] = _stride.SHEET_ResTypeReg1_get
    if _newclass:ResTypeReg1 = _swig_property(_stride.SHEET_ResTypeReg1_get, _stride.SHEET_ResTypeReg1_set)
    __swig_setmethods__["ResTypeReg2"] = _stride.SHEET_ResTypeReg2_set
    __swig_getmethods__["ResTypeReg2"] = _stride.SHEET_ResTypeReg2_get
    if _newclass:ResTypeReg2 = _swig_property(_stride.SHEET_ResTypeReg2_get, _stride.SHEET_ResTypeReg2_set)
    __swig_setmethods__["PDB_ResNumbReg1"] = _stride.SHEET_PDB_ResNumbReg1_set
    __swig_getmethods__["PDB_ResNumbReg1"] = _stride.SHEET_PDB_ResNumbReg1_get
    if _newclass:PDB_ResNumbReg1 = _swig_property(_stride.SHEET_PDB_ResNumbReg1_get, _stride.SHEET_PDB_ResNumbReg1_set)
    __swig_setmethods__["PDB_ResNumbReg2"] = _stride.SHEET_PDB_ResNumbReg2_set
    __swig_getmethods__["PDB_ResNumbReg2"] = _stride.SHEET_PDB_ResNumbReg2_get
    if _newclass:PDB_ResNumbReg2 = _swig_property(_stride.SHEET_PDB_ResNumbReg2_get, _stride.SHEET_PDB_ResNumbReg2_set)
    __swig_setmethods__["InsCodeReg1"] = _stride.SHEET_InsCodeReg1_set
    __swig_getmethods__["InsCodeReg1"] = _stride.SHEET_InsCodeReg1_get
    if _newclass:InsCodeReg1 = _swig_property(_stride.SHEET_InsCodeReg1_get, _stride.SHEET_InsCodeReg1_set)
    __swig_setmethods__["InsCodeReg2"] = _stride.SHEET_InsCodeReg2_set
    __swig_getmethods__["InsCodeReg2"] = _stride.SHEET_InsCodeReg2_get
    if _newclass:InsCodeReg2 = _swig_property(_stride.SHEET_InsCodeReg2_get, _stride.SHEET_InsCodeReg2_set)
    def __init__(self, *args): 
        this = _stride.new_SHEET(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_SHEET
    __del__ = lambda self : None;
SHEET_swigregister = _stride.SHEET_swigregister
SHEET_swigregister(SHEET)

class TURN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TURN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TURN, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Res1"] = _stride.TURN_Res1_set
    __swig_getmethods__["Res1"] = _stride.TURN_Res1_get
    if _newclass:Res1 = _swig_property(_stride.TURN_Res1_get, _stride.TURN_Res1_set)
    __swig_setmethods__["Res2"] = _stride.TURN_Res2_set
    __swig_getmethods__["Res2"] = _stride.TURN_Res2_get
    if _newclass:Res2 = _swig_property(_stride.TURN_Res2_get, _stride.TURN_Res2_set)
    __swig_setmethods__["PDB_ResNumb1"] = _stride.TURN_PDB_ResNumb1_set
    __swig_getmethods__["PDB_ResNumb1"] = _stride.TURN_PDB_ResNumb1_get
    if _newclass:PDB_ResNumb1 = _swig_property(_stride.TURN_PDB_ResNumb1_get, _stride.TURN_PDB_ResNumb1_set)
    __swig_setmethods__["PDB_ResNumb2"] = _stride.TURN_PDB_ResNumb2_set
    __swig_getmethods__["PDB_ResNumb2"] = _stride.TURN_PDB_ResNumb2_get
    if _newclass:PDB_ResNumb2 = _swig_property(_stride.TURN_PDB_ResNumb2_get, _stride.TURN_PDB_ResNumb2_set)
    __swig_setmethods__["InsCode1"] = _stride.TURN_InsCode1_set
    __swig_getmethods__["InsCode1"] = _stride.TURN_InsCode1_get
    if _newclass:InsCode1 = _swig_property(_stride.TURN_InsCode1_get, _stride.TURN_InsCode1_set)
    __swig_setmethods__["InsCode2"] = _stride.TURN_InsCode2_set
    __swig_getmethods__["InsCode2"] = _stride.TURN_InsCode2_get
    if _newclass:InsCode2 = _swig_property(_stride.TURN_InsCode2_get, _stride.TURN_InsCode2_set)
    __swig_setmethods__["TurnType"] = _stride.TURN_TurnType_set
    __swig_getmethods__["TurnType"] = _stride.TURN_TurnType_get
    if _newclass:TurnType = _swig_property(_stride.TURN_TurnType_get, _stride.TURN_TurnType_set)
    def __init__(self, *args): 
        this = _stride.new_TURN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_TURN
    __del__ = lambda self : None;
TURN_swigregister = _stride.TURN_swigregister
TURN_swigregister(TURN)

class SSBOND(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSBOND, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SSBOND, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PDB_ResNumb1"] = _stride.SSBOND_PDB_ResNumb1_set
    __swig_getmethods__["PDB_ResNumb1"] = _stride.SSBOND_PDB_ResNumb1_get
    if _newclass:PDB_ResNumb1 = _swig_property(_stride.SSBOND_PDB_ResNumb1_get, _stride.SSBOND_PDB_ResNumb1_set)
    __swig_setmethods__["PDB_ResNumb2"] = _stride.SSBOND_PDB_ResNumb2_set
    __swig_getmethods__["PDB_ResNumb2"] = _stride.SSBOND_PDB_ResNumb2_get
    if _newclass:PDB_ResNumb2 = _swig_property(_stride.SSBOND_PDB_ResNumb2_get, _stride.SSBOND_PDB_ResNumb2_set)
    __swig_setmethods__["InsCode1"] = _stride.SSBOND_InsCode1_set
    __swig_getmethods__["InsCode1"] = _stride.SSBOND_InsCode1_get
    if _newclass:InsCode1 = _swig_property(_stride.SSBOND_InsCode1_get, _stride.SSBOND_InsCode1_set)
    __swig_setmethods__["InsCode2"] = _stride.SSBOND_InsCode2_set
    __swig_getmethods__["InsCode2"] = _stride.SSBOND_InsCode2_get
    if _newclass:InsCode2 = _swig_property(_stride.SSBOND_InsCode2_get, _stride.SSBOND_InsCode2_set)
    __swig_setmethods__["ChainId1"] = _stride.SSBOND_ChainId1_set
    __swig_getmethods__["ChainId1"] = _stride.SSBOND_ChainId1_get
    if _newclass:ChainId1 = _swig_property(_stride.SSBOND_ChainId1_get, _stride.SSBOND_ChainId1_set)
    __swig_setmethods__["ChainId2"] = _stride.SSBOND_ChainId2_set
    __swig_getmethods__["ChainId2"] = _stride.SSBOND_ChainId2_get
    if _newclass:ChainId2 = _swig_property(_stride.SSBOND_ChainId2_get, _stride.SSBOND_ChainId2_set)
    __swig_setmethods__["AsnSource"] = _stride.SSBOND_AsnSource_set
    __swig_getmethods__["AsnSource"] = _stride.SSBOND_AsnSource_get
    if _newclass:AsnSource = _swig_property(_stride.SSBOND_AsnSource_get, _stride.SSBOND_AsnSource_set)
    def __init__(self, *args): 
        this = _stride.new_SSBOND(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_SSBOND
    __del__ = lambda self : None;
SSBOND_swigregister = _stride.SSBOND_swigregister
SSBOND_swigregister(SSBOND)

class CHAIN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHAIN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHAIN, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NRes"] = _stride.CHAIN_NRes_set
    __swig_getmethods__["NRes"] = _stride.CHAIN_NRes_get
    if _newclass:NRes = _swig_property(_stride.CHAIN_NRes_get, _stride.CHAIN_NRes_set)
    __swig_setmethods__["NHetRes"] = _stride.CHAIN_NHetRes_set
    __swig_getmethods__["NHetRes"] = _stride.CHAIN_NHetRes_get
    if _newclass:NHetRes = _swig_property(_stride.CHAIN_NHetRes_get, _stride.CHAIN_NHetRes_set)
    __swig_setmethods__["NonStandRes"] = _stride.CHAIN_NonStandRes_set
    __swig_getmethods__["NonStandRes"] = _stride.CHAIN_NonStandRes_get
    if _newclass:NonStandRes = _swig_property(_stride.CHAIN_NonStandRes_get, _stride.CHAIN_NonStandRes_set)
    __swig_setmethods__["Ter"] = _stride.CHAIN_Ter_set
    __swig_getmethods__["Ter"] = _stride.CHAIN_Ter_get
    if _newclass:Ter = _swig_property(_stride.CHAIN_Ter_get, _stride.CHAIN_Ter_set)
    __swig_setmethods__["NHet"] = _stride.CHAIN_NHet_set
    __swig_getmethods__["NHet"] = _stride.CHAIN_NHet_get
    if _newclass:NHet = _swig_property(_stride.CHAIN_NHet_get, _stride.CHAIN_NHet_set)
    __swig_setmethods__["NAtom"] = _stride.CHAIN_NAtom_set
    __swig_getmethods__["NAtom"] = _stride.CHAIN_NAtom_get
    if _newclass:NAtom = _swig_property(_stride.CHAIN_NAtom_get, _stride.CHAIN_NAtom_set)
    __swig_setmethods__["NonStandAtom"] = _stride.CHAIN_NonStandAtom_set
    __swig_getmethods__["NonStandAtom"] = _stride.CHAIN_NonStandAtom_get
    if _newclass:NonStandAtom = _swig_property(_stride.CHAIN_NonStandAtom_get, _stride.CHAIN_NonStandAtom_set)
    __swig_setmethods__["NHelix"] = _stride.CHAIN_NHelix_set
    __swig_getmethods__["NHelix"] = _stride.CHAIN_NHelix_get
    if _newclass:NHelix = _swig_property(_stride.CHAIN_NHelix_get, _stride.CHAIN_NHelix_set)
    __swig_setmethods__["NSheet"] = _stride.CHAIN_NSheet_set
    __swig_getmethods__["NSheet"] = _stride.CHAIN_NSheet_get
    if _newclass:NSheet = _swig_property(_stride.CHAIN_NSheet_get, _stride.CHAIN_NSheet_set)
    __swig_setmethods__["NTurn"] = _stride.CHAIN_NTurn_set
    __swig_getmethods__["NTurn"] = _stride.CHAIN_NTurn_get
    if _newclass:NTurn = _swig_property(_stride.CHAIN_NTurn_get, _stride.CHAIN_NTurn_set)
    __swig_setmethods__["NAssignedTurn"] = _stride.CHAIN_NAssignedTurn_set
    __swig_getmethods__["NAssignedTurn"] = _stride.CHAIN_NAssignedTurn_get
    if _newclass:NAssignedTurn = _swig_property(_stride.CHAIN_NAssignedTurn_get, _stride.CHAIN_NAssignedTurn_set)
    __swig_setmethods__["NBond"] = _stride.CHAIN_NBond_set
    __swig_getmethods__["NBond"] = _stride.CHAIN_NBond_get
    if _newclass:NBond = _swig_property(_stride.CHAIN_NBond_get, _stride.CHAIN_NBond_set)
    __swig_setmethods__["NHydrBond"] = _stride.CHAIN_NHydrBond_set
    __swig_getmethods__["NHydrBond"] = _stride.CHAIN_NHydrBond_get
    if _newclass:NHydrBond = _swig_property(_stride.CHAIN_NHydrBond_get, _stride.CHAIN_NHydrBond_set)
    __swig_setmethods__["NHydrBondInterchain"] = _stride.CHAIN_NHydrBondInterchain_set
    __swig_getmethods__["NHydrBondInterchain"] = _stride.CHAIN_NHydrBondInterchain_get
    if _newclass:NHydrBondInterchain = _swig_property(_stride.CHAIN_NHydrBondInterchain_get, _stride.CHAIN_NHydrBondInterchain_set)
    __swig_setmethods__["NHydrBondTotal"] = _stride.CHAIN_NHydrBondTotal_set
    __swig_getmethods__["NHydrBondTotal"] = _stride.CHAIN_NHydrBondTotal_get
    if _newclass:NHydrBondTotal = _swig_property(_stride.CHAIN_NHydrBondTotal_get, _stride.CHAIN_NHydrBondTotal_set)
    __swig_setmethods__["NInfo"] = _stride.CHAIN_NInfo_set
    __swig_getmethods__["NInfo"] = _stride.CHAIN_NInfo_get
    if _newclass:NInfo = _swig_property(_stride.CHAIN_NInfo_get, _stride.CHAIN_NInfo_set)
    __swig_setmethods__["Id"] = _stride.CHAIN_Id_set
    __swig_getmethods__["Id"] = _stride.CHAIN_Id_get
    if _newclass:Id = _swig_property(_stride.CHAIN_Id_get, _stride.CHAIN_Id_set)
    __swig_setmethods__["File"] = _stride.CHAIN_File_set
    __swig_getmethods__["File"] = _stride.CHAIN_File_get
    if _newclass:File = _swig_property(_stride.CHAIN_File_get, _stride.CHAIN_File_set)
    __swig_setmethods__["Resolution"] = _stride.CHAIN_Resolution_set
    __swig_getmethods__["Resolution"] = _stride.CHAIN_Resolution_get
    if _newclass:Resolution = _swig_property(_stride.CHAIN_Resolution_get, _stride.CHAIN_Resolution_set)
    __swig_setmethods__["Method"] = _stride.CHAIN_Method_set
    __swig_getmethods__["Method"] = _stride.CHAIN_Method_get
    if _newclass:Method = _swig_property(_stride.CHAIN_Method_get, _stride.CHAIN_Method_set)
    __swig_setmethods__["Valid"] = _stride.CHAIN_Valid_set
    __swig_getmethods__["Valid"] = _stride.CHAIN_Valid_get
    if _newclass:Valid = _swig_property(_stride.CHAIN_Valid_get, _stride.CHAIN_Valid_set)
    __swig_setmethods__["Published"] = _stride.CHAIN_Published_set
    __swig_getmethods__["Published"] = _stride.CHAIN_Published_get
    if _newclass:Published = _swig_property(_stride.CHAIN_Published_get, _stride.CHAIN_Published_set)
    __swig_setmethods__["DsspAssigned"] = _stride.CHAIN_DsspAssigned_set
    __swig_getmethods__["DsspAssigned"] = _stride.CHAIN_DsspAssigned_get
    if _newclass:DsspAssigned = _swig_property(_stride.CHAIN_DsspAssigned_get, _stride.CHAIN_DsspAssigned_set)
    __swig_setmethods__["Rsd"] = _stride.CHAIN_Rsd_set
    __swig_getmethods__["Rsd"] = _stride.CHAIN_Rsd_get
    if _newclass:Rsd = _swig_property(_stride.CHAIN_Rsd_get, _stride.CHAIN_Rsd_set)
    __swig_setmethods__["HetRsd"] = _stride.CHAIN_HetRsd_set
    __swig_getmethods__["HetRsd"] = _stride.CHAIN_HetRsd_get
    if _newclass:HetRsd = _swig_property(_stride.CHAIN_HetRsd_get, _stride.CHAIN_HetRsd_set)
    __swig_setmethods__["Het"] = _stride.CHAIN_Het_set
    __swig_getmethods__["Het"] = _stride.CHAIN_Het_get
    if _newclass:Het = _swig_property(_stride.CHAIN_Het_get, _stride.CHAIN_Het_set)
    __swig_setmethods__["Helix"] = _stride.CHAIN_Helix_set
    __swig_getmethods__["Helix"] = _stride.CHAIN_Helix_get
    if _newclass:Helix = _swig_property(_stride.CHAIN_Helix_get, _stride.CHAIN_Helix_set)
    __swig_setmethods__["Sheet"] = _stride.CHAIN_Sheet_set
    __swig_getmethods__["Sheet"] = _stride.CHAIN_Sheet_get
    if _newclass:Sheet = _swig_property(_stride.CHAIN_Sheet_get, _stride.CHAIN_Sheet_set)
    __swig_setmethods__["Turn"] = _stride.CHAIN_Turn_set
    __swig_getmethods__["Turn"] = _stride.CHAIN_Turn_get
    if _newclass:Turn = _swig_property(_stride.CHAIN_Turn_get, _stride.CHAIN_Turn_set)
    __swig_setmethods__["AssignedTurn"] = _stride.CHAIN_AssignedTurn_set
    __swig_getmethods__["AssignedTurn"] = _stride.CHAIN_AssignedTurn_get
    if _newclass:AssignedTurn = _swig_property(_stride.CHAIN_AssignedTurn_get, _stride.CHAIN_AssignedTurn_set)
    __swig_setmethods__["SSbond"] = _stride.CHAIN_SSbond_set
    __swig_getmethods__["SSbond"] = _stride.CHAIN_SSbond_get
    if _newclass:SSbond = _swig_property(_stride.CHAIN_SSbond_get, _stride.CHAIN_SSbond_set)
    __swig_setmethods__["Info"] = _stride.CHAIN_Info_set
    __swig_getmethods__["Info"] = _stride.CHAIN_Info_get
    if _newclass:Info = _swig_property(_stride.CHAIN_Info_get, _stride.CHAIN_Info_set)
    __swig_setmethods__["PdbIdent"] = _stride.CHAIN_PdbIdent_set
    __swig_getmethods__["PdbIdent"] = _stride.CHAIN_PdbIdent_get
    if _newclass:PdbIdent = _swig_property(_stride.CHAIN_PdbIdent_get, _stride.CHAIN_PdbIdent_set)
    def getResidue(*args): return _stride.CHAIN_getResidue(*args)
    def getHeteroResidue(*args): return _stride.CHAIN_getHeteroResidue(*args)
    def getHet(*args): return _stride.CHAIN_getHet(*args)
    def getHelix(*args): return _stride.CHAIN_getHelix(*args)
    def getSheet(*args): return _stride.CHAIN_getSheet(*args)
    def getTurn(*args): return _stride.CHAIN_getTurn(*args)
    def getAssignedTurn(*args): return _stride.CHAIN_getAssignedTurn(*args)
    def getSsbond(*args): return _stride.CHAIN_getSsbond(*args)
    def __init__(self, *args): 
        this = _stride.new_CHAIN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_CHAIN
    __del__ = lambda self : None;
CHAIN_swigregister = _stride.CHAIN_swigregister
CHAIN_swigregister(CHAIN)

class DONOR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DONOR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DONOR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Chain"] = _stride.DONOR_Chain_set
    __swig_getmethods__["Chain"] = _stride.DONOR_Chain_get
    if _newclass:Chain = _swig_property(_stride.DONOR_Chain_get, _stride.DONOR_Chain_set)
    __swig_setmethods__["D_Res"] = _stride.DONOR_D_Res_set
    __swig_getmethods__["D_Res"] = _stride.DONOR_D_Res_get
    if _newclass:D_Res = _swig_property(_stride.DONOR_D_Res_get, _stride.DONOR_D_Res_set)
    __swig_setmethods__["DD_Res"] = _stride.DONOR_DD_Res_set
    __swig_getmethods__["DD_Res"] = _stride.DONOR_DD_Res_get
    if _newclass:DD_Res = _swig_property(_stride.DONOR_DD_Res_get, _stride.DONOR_DD_Res_set)
    __swig_setmethods__["DDI_Res"] = _stride.DONOR_DDI_Res_set
    __swig_getmethods__["DDI_Res"] = _stride.DONOR_DDI_Res_get
    if _newclass:DDI_Res = _swig_property(_stride.DONOR_DDI_Res_get, _stride.DONOR_DDI_Res_set)
    __swig_setmethods__["D_At"] = _stride.DONOR_D_At_set
    __swig_getmethods__["D_At"] = _stride.DONOR_D_At_get
    if _newclass:D_At = _swig_property(_stride.DONOR_D_At_get, _stride.DONOR_D_At_set)
    __swig_setmethods__["DD_At"] = _stride.DONOR_DD_At_set
    __swig_getmethods__["DD_At"] = _stride.DONOR_DD_At_get
    if _newclass:DD_At = _swig_property(_stride.DONOR_DD_At_get, _stride.DONOR_DD_At_set)
    __swig_setmethods__["DDI_At"] = _stride.DONOR_DDI_At_set
    __swig_getmethods__["DDI_At"] = _stride.DONOR_DDI_At_get
    if _newclass:DDI_At = _swig_property(_stride.DONOR_DDI_At_get, _stride.DONOR_DDI_At_set)
    __swig_setmethods__["H"] = _stride.DONOR_H_set
    __swig_getmethods__["H"] = _stride.DONOR_H_get
    if _newclass:H = _swig_property(_stride.DONOR_H_get, _stride.DONOR_H_set)
    __swig_setmethods__["Hybrid"] = _stride.DONOR_Hybrid_set
    __swig_getmethods__["Hybrid"] = _stride.DONOR_Hybrid_get
    if _newclass:Hybrid = _swig_property(_stride.DONOR_Hybrid_get, _stride.DONOR_Hybrid_set)
    __swig_setmethods__["Group"] = _stride.DONOR_Group_set
    __swig_getmethods__["Group"] = _stride.DONOR_Group_get
    if _newclass:Group = _swig_property(_stride.DONOR_Group_get, _stride.DONOR_Group_set)
    __swig_setmethods__["HB_Radius"] = _stride.DONOR_HB_Radius_set
    __swig_getmethods__["HB_Radius"] = _stride.DONOR_HB_Radius_get
    if _newclass:HB_Radius = _swig_property(_stride.DONOR_HB_Radius_get, _stride.DONOR_HB_Radius_set)
    def __init__(self, *args): 
        this = _stride.new_DONOR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_DONOR
    __del__ = lambda self : None;
DONOR_swigregister = _stride.DONOR_swigregister
DONOR_swigregister(DONOR)

class ACCEPTOR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ACCEPTOR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ACCEPTOR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Chain"] = _stride.ACCEPTOR_Chain_set
    __swig_getmethods__["Chain"] = _stride.ACCEPTOR_Chain_get
    if _newclass:Chain = _swig_property(_stride.ACCEPTOR_Chain_get, _stride.ACCEPTOR_Chain_set)
    __swig_setmethods__["A_Res"] = _stride.ACCEPTOR_A_Res_set
    __swig_getmethods__["A_Res"] = _stride.ACCEPTOR_A_Res_get
    if _newclass:A_Res = _swig_property(_stride.ACCEPTOR_A_Res_get, _stride.ACCEPTOR_A_Res_set)
    __swig_setmethods__["AA_Res"] = _stride.ACCEPTOR_AA_Res_set
    __swig_getmethods__["AA_Res"] = _stride.ACCEPTOR_AA_Res_get
    if _newclass:AA_Res = _swig_property(_stride.ACCEPTOR_AA_Res_get, _stride.ACCEPTOR_AA_Res_set)
    __swig_setmethods__["AA2_Res"] = _stride.ACCEPTOR_AA2_Res_set
    __swig_getmethods__["AA2_Res"] = _stride.ACCEPTOR_AA2_Res_get
    if _newclass:AA2_Res = _swig_property(_stride.ACCEPTOR_AA2_Res_get, _stride.ACCEPTOR_AA2_Res_set)
    __swig_setmethods__["A_At"] = _stride.ACCEPTOR_A_At_set
    __swig_getmethods__["A_At"] = _stride.ACCEPTOR_A_At_get
    if _newclass:A_At = _swig_property(_stride.ACCEPTOR_A_At_get, _stride.ACCEPTOR_A_At_set)
    __swig_setmethods__["AA_At"] = _stride.ACCEPTOR_AA_At_set
    __swig_getmethods__["AA_At"] = _stride.ACCEPTOR_AA_At_get
    if _newclass:AA_At = _swig_property(_stride.ACCEPTOR_AA_At_get, _stride.ACCEPTOR_AA_At_set)
    __swig_setmethods__["AA2_At"] = _stride.ACCEPTOR_AA2_At_set
    __swig_getmethods__["AA2_At"] = _stride.ACCEPTOR_AA2_At_get
    if _newclass:AA2_At = _swig_property(_stride.ACCEPTOR_AA2_At_get, _stride.ACCEPTOR_AA2_At_set)
    __swig_setmethods__["Hybrid"] = _stride.ACCEPTOR_Hybrid_set
    __swig_getmethods__["Hybrid"] = _stride.ACCEPTOR_Hybrid_get
    if _newclass:Hybrid = _swig_property(_stride.ACCEPTOR_Hybrid_get, _stride.ACCEPTOR_Hybrid_set)
    __swig_setmethods__["Group"] = _stride.ACCEPTOR_Group_set
    __swig_getmethods__["Group"] = _stride.ACCEPTOR_Group_get
    if _newclass:Group = _swig_property(_stride.ACCEPTOR_Group_get, _stride.ACCEPTOR_Group_set)
    __swig_setmethods__["HB_Radius"] = _stride.ACCEPTOR_HB_Radius_set
    __swig_getmethods__["HB_Radius"] = _stride.ACCEPTOR_HB_Radius_get
    if _newclass:HB_Radius = _swig_property(_stride.ACCEPTOR_HB_Radius_get, _stride.ACCEPTOR_HB_Radius_set)
    def __init__(self, *args): 
        this = _stride.new_ACCEPTOR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_ACCEPTOR
    __del__ = lambda self : None;
ACCEPTOR_swigregister = _stride.ACCEPTOR_swigregister
ACCEPTOR_swigregister(ACCEPTOR)

class COMMAND(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COMMAND, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COMMAND, name)
    __repr__ = _swig_repr
    __swig_setmethods__["InputFile"] = _stride.COMMAND_InputFile_set
    __swig_getmethods__["InputFile"] = _stride.COMMAND_InputFile_get
    if _newclass:InputFile = _swig_property(_stride.COMMAND_InputFile_get, _stride.COMMAND_InputFile_set)
    __swig_setmethods__["OutFile"] = _stride.COMMAND_OutFile_set
    __swig_getmethods__["OutFile"] = _stride.COMMAND_OutFile_get
    if _newclass:OutFile = _swig_property(_stride.COMMAND_OutFile_get, _stride.COMMAND_OutFile_set)
    __swig_setmethods__["SeqFile"] = _stride.COMMAND_SeqFile_set
    __swig_getmethods__["SeqFile"] = _stride.COMMAND_SeqFile_get
    if _newclass:SeqFile = _swig_property(_stride.COMMAND_SeqFile_get, _stride.COMMAND_SeqFile_set)
    __swig_setmethods__["MapFileHelix"] = _stride.COMMAND_MapFileHelix_set
    __swig_getmethods__["MapFileHelix"] = _stride.COMMAND_MapFileHelix_get
    if _newclass:MapFileHelix = _swig_property(_stride.COMMAND_MapFileHelix_get, _stride.COMMAND_MapFileHelix_set)
    __swig_setmethods__["MapFileSheet"] = _stride.COMMAND_MapFileSheet_set
    __swig_getmethods__["MapFileSheet"] = _stride.COMMAND_MapFileSheet_get
    if _newclass:MapFileSheet = _swig_property(_stride.COMMAND_MapFileSheet_get, _stride.COMMAND_MapFileSheet_set)
    __swig_setmethods__["MolScriptFile"] = _stride.COMMAND_MolScriptFile_set
    __swig_getmethods__["MolScriptFile"] = _stride.COMMAND_MolScriptFile_get
    if _newclass:MolScriptFile = _swig_property(_stride.COMMAND_MolScriptFile_get, _stride.COMMAND_MolScriptFile_set)
    __swig_setmethods__["DsspFile"] = _stride.COMMAND_DsspFile_set
    __swig_getmethods__["DsspFile"] = _stride.COMMAND_DsspFile_get
    if _newclass:DsspFile = _swig_property(_stride.COMMAND_DsspFile_get, _stride.COMMAND_DsspFile_set)
    __swig_setmethods__["EnergyType"] = _stride.COMMAND_EnergyType_set
    __swig_getmethods__["EnergyType"] = _stride.COMMAND_EnergyType_get
    if _newclass:EnergyType = _swig_property(_stride.COMMAND_EnergyType_get, _stride.COMMAND_EnergyType_set)
    __swig_setmethods__["Active"] = _stride.COMMAND_Active_set
    __swig_getmethods__["Active"] = _stride.COMMAND_Active_get
    if _newclass:Active = _swig_property(_stride.COMMAND_Active_get, _stride.COMMAND_Active_set)
    __swig_setmethods__["Processed"] = _stride.COMMAND_Processed_set
    __swig_getmethods__["Processed"] = _stride.COMMAND_Processed_get
    if _newclass:Processed = _swig_property(_stride.COMMAND_Processed_get, _stride.COMMAND_Processed_set)
    __swig_setmethods__["Cond"] = _stride.COMMAND_Cond_set
    __swig_getmethods__["Cond"] = _stride.COMMAND_Cond_get
    if _newclass:Cond = _swig_property(_stride.COMMAND_Cond_get, _stride.COMMAND_Cond_set)
    __swig_setmethods__["NPixel"] = _stride.COMMAND_NPixel_set
    __swig_getmethods__["NPixel"] = _stride.COMMAND_NPixel_get
    if _newclass:NPixel = _swig_property(_stride.COMMAND_NPixel_get, _stride.COMMAND_NPixel_set)
    __swig_setmethods__["NActive"] = _stride.COMMAND_NActive_set
    __swig_getmethods__["NActive"] = _stride.COMMAND_NActive_get
    if _newclass:NActive = _swig_property(_stride.COMMAND_NActive_get, _stride.COMMAND_NActive_set)
    __swig_setmethods__["NProcessed"] = _stride.COMMAND_NProcessed_set
    __swig_getmethods__["NProcessed"] = _stride.COMMAND_NProcessed_get
    if _newclass:NProcessed = _swig_property(_stride.COMMAND_NProcessed_get, _stride.COMMAND_NProcessed_set)
    __swig_setmethods__["MinLength"] = _stride.COMMAND_MinLength_set
    __swig_getmethods__["MinLength"] = _stride.COMMAND_MinLength_get
    if _newclass:MinLength = _swig_property(_stride.COMMAND_MinLength_get, _stride.COMMAND_MinLength_set)
    __swig_setmethods__["MaxLength"] = _stride.COMMAND_MaxLength_set
    __swig_getmethods__["MaxLength"] = _stride.COMMAND_MaxLength_get
    if _newclass:MaxLength = _swig_property(_stride.COMMAND_MaxLength_get, _stride.COMMAND_MaxLength_set)
    __swig_setmethods__["PhiPsiStep"] = _stride.COMMAND_PhiPsiStep_set
    __swig_getmethods__["PhiPsiStep"] = _stride.COMMAND_PhiPsiStep_get
    if _newclass:PhiPsiStep = _swig_property(_stride.COMMAND_PhiPsiStep_get, _stride.COMMAND_PhiPsiStep_set)
    __swig_setmethods__["DistCutOff"] = _stride.COMMAND_DistCutOff_set
    __swig_getmethods__["DistCutOff"] = _stride.COMMAND_DistCutOff_get
    if _newclass:DistCutOff = _swig_property(_stride.COMMAND_DistCutOff_get, _stride.COMMAND_DistCutOff_set)
    __swig_setmethods__["Treshold_H1"] = _stride.COMMAND_Treshold_H1_set
    __swig_getmethods__["Treshold_H1"] = _stride.COMMAND_Treshold_H1_get
    if _newclass:Treshold_H1 = _swig_property(_stride.COMMAND_Treshold_H1_get, _stride.COMMAND_Treshold_H1_set)
    __swig_setmethods__["Treshold_H2"] = _stride.COMMAND_Treshold_H2_set
    __swig_getmethods__["Treshold_H2"] = _stride.COMMAND_Treshold_H2_get
    if _newclass:Treshold_H2 = _swig_property(_stride.COMMAND_Treshold_H2_get, _stride.COMMAND_Treshold_H2_set)
    __swig_setmethods__["Treshold_H3"] = _stride.COMMAND_Treshold_H3_set
    __swig_getmethods__["Treshold_H3"] = _stride.COMMAND_Treshold_H3_get
    if _newclass:Treshold_H3 = _swig_property(_stride.COMMAND_Treshold_H3_get, _stride.COMMAND_Treshold_H3_set)
    __swig_setmethods__["Treshold_H4"] = _stride.COMMAND_Treshold_H4_set
    __swig_getmethods__["Treshold_H4"] = _stride.COMMAND_Treshold_H4_get
    if _newclass:Treshold_H4 = _swig_property(_stride.COMMAND_Treshold_H4_get, _stride.COMMAND_Treshold_H4_set)
    __swig_setmethods__["Treshold_E1"] = _stride.COMMAND_Treshold_E1_set
    __swig_getmethods__["Treshold_E1"] = _stride.COMMAND_Treshold_E1_get
    if _newclass:Treshold_E1 = _swig_property(_stride.COMMAND_Treshold_E1_get, _stride.COMMAND_Treshold_E1_set)
    __swig_setmethods__["Treshold_E2"] = _stride.COMMAND_Treshold_E2_set
    __swig_getmethods__["Treshold_E2"] = _stride.COMMAND_Treshold_E2_get
    if _newclass:Treshold_E2 = _swig_property(_stride.COMMAND_Treshold_E2_get, _stride.COMMAND_Treshold_E2_set)
    __swig_setmethods__["Treshold_E3"] = _stride.COMMAND_Treshold_E3_set
    __swig_getmethods__["Treshold_E3"] = _stride.COMMAND_Treshold_E3_get
    if _newclass:Treshold_E3 = _swig_property(_stride.COMMAND_Treshold_E3_get, _stride.COMMAND_Treshold_E3_set)
    __swig_setmethods__["Treshold_E4"] = _stride.COMMAND_Treshold_E4_set
    __swig_getmethods__["Treshold_E4"] = _stride.COMMAND_Treshold_E4_get
    if _newclass:Treshold_E4 = _swig_property(_stride.COMMAND_Treshold_E4_get, _stride.COMMAND_Treshold_E4_set)
    __swig_setmethods__["MinResolution"] = _stride.COMMAND_MinResolution_set
    __swig_getmethods__["MinResolution"] = _stride.COMMAND_MinResolution_get
    if _newclass:MinResolution = _swig_property(_stride.COMMAND_MinResolution_get, _stride.COMMAND_MinResolution_set)
    __swig_setmethods__["MaxResolution"] = _stride.COMMAND_MaxResolution_set
    __swig_getmethods__["MaxResolution"] = _stride.COMMAND_MaxResolution_get
    if _newclass:MaxResolution = _swig_property(_stride.COMMAND_MaxResolution_get, _stride.COMMAND_MaxResolution_set)
    __swig_setmethods__["C1_H"] = _stride.COMMAND_C1_H_set
    __swig_getmethods__["C1_H"] = _stride.COMMAND_C1_H_get
    if _newclass:C1_H = _swig_property(_stride.COMMAND_C1_H_get, _stride.COMMAND_C1_H_set)
    __swig_setmethods__["C2_H"] = _stride.COMMAND_C2_H_set
    __swig_getmethods__["C2_H"] = _stride.COMMAND_C2_H_get
    if _newclass:C2_H = _swig_property(_stride.COMMAND_C2_H_get, _stride.COMMAND_C2_H_set)
    __swig_setmethods__["C1_E"] = _stride.COMMAND_C1_E_set
    __swig_getmethods__["C1_E"] = _stride.COMMAND_C1_E_get
    if _newclass:C1_E = _swig_property(_stride.COMMAND_C1_E_get, _stride.COMMAND_C1_E_set)
    __swig_setmethods__["C2_E"] = _stride.COMMAND_C2_E_set
    __swig_getmethods__["C2_E"] = _stride.COMMAND_C2_E_get
    if _newclass:C2_E = _swig_property(_stride.COMMAND_C2_E_get, _stride.COMMAND_C2_E_set)
    __swig_setmethods__["SideChainHBond"] = _stride.COMMAND_SideChainHBond_set
    __swig_getmethods__["SideChainHBond"] = _stride.COMMAND_SideChainHBond_get
    if _newclass:SideChainHBond = _swig_property(_stride.COMMAND_SideChainHBond_get, _stride.COMMAND_SideChainHBond_set)
    __swig_setmethods__["MainChainHBond"] = _stride.COMMAND_MainChainHBond_set
    __swig_getmethods__["MainChainHBond"] = _stride.COMMAND_MainChainHBond_get
    if _newclass:MainChainHBond = _swig_property(_stride.COMMAND_MainChainHBond_get, _stride.COMMAND_MainChainHBond_set)
    __swig_setmethods__["MainChainPolarInt"] = _stride.COMMAND_MainChainPolarInt_set
    __swig_getmethods__["MainChainPolarInt"] = _stride.COMMAND_MainChainPolarInt_get
    if _newclass:MainChainPolarInt = _swig_property(_stride.COMMAND_MainChainPolarInt_get, _stride.COMMAND_MainChainPolarInt_set)
    __swig_setmethods__["Published"] = _stride.COMMAND_Published_set
    __swig_getmethods__["Published"] = _stride.COMMAND_Published_get
    if _newclass:Published = _swig_property(_stride.COMMAND_Published_get, _stride.COMMAND_Published_set)
    __swig_setmethods__["DsspAssigned"] = _stride.COMMAND_DsspAssigned_set
    __swig_getmethods__["DsspAssigned"] = _stride.COMMAND_DsspAssigned_get
    if _newclass:DsspAssigned = _swig_property(_stride.COMMAND_DsspAssigned_get, _stride.COMMAND_DsspAssigned_set)
    __swig_setmethods__["UseResolution"] = _stride.COMMAND_UseResolution_set
    __swig_getmethods__["UseResolution"] = _stride.COMMAND_UseResolution_get
    if _newclass:UseResolution = _swig_property(_stride.COMMAND_UseResolution_get, _stride.COMMAND_UseResolution_set)
    __swig_setmethods__["Info"] = _stride.COMMAND_Info_set
    __swig_getmethods__["Info"] = _stride.COMMAND_Info_get
    if _newclass:Info = _swig_property(_stride.COMMAND_Info_get, _stride.COMMAND_Info_set)
    __swig_setmethods__["Truncate"] = _stride.COMMAND_Truncate_set
    __swig_getmethods__["Truncate"] = _stride.COMMAND_Truncate_get
    if _newclass:Truncate = _swig_property(_stride.COMMAND_Truncate_get, _stride.COMMAND_Truncate_set)
    __swig_setmethods__["ExposedArea"] = _stride.COMMAND_ExposedArea_set
    __swig_getmethods__["ExposedArea"] = _stride.COMMAND_ExposedArea_get
    if _newclass:ExposedArea = _swig_property(_stride.COMMAND_ExposedArea_get, _stride.COMMAND_ExposedArea_set)
    __swig_setmethods__["ReportSummaryOnly"] = _stride.COMMAND_ReportSummaryOnly_set
    __swig_getmethods__["ReportSummaryOnly"] = _stride.COMMAND_ReportSummaryOnly_get
    if _newclass:ReportSummaryOnly = _swig_property(_stride.COMMAND_ReportSummaryOnly_get, _stride.COMMAND_ReportSummaryOnly_set)
    __swig_setmethods__["ReportBonds"] = _stride.COMMAND_ReportBonds_set
    __swig_getmethods__["ReportBonds"] = _stride.COMMAND_ReportBonds_get
    if _newclass:ReportBonds = _swig_property(_stride.COMMAND_ReportBonds_get, _stride.COMMAND_ReportBonds_set)
    __swig_setmethods__["BrookhavenAsn"] = _stride.COMMAND_BrookhavenAsn_set
    __swig_getmethods__["BrookhavenAsn"] = _stride.COMMAND_BrookhavenAsn_get
    if _newclass:BrookhavenAsn = _swig_property(_stride.COMMAND_BrookhavenAsn_get, _stride.COMMAND_BrookhavenAsn_set)
    __swig_setmethods__["DsspAsn"] = _stride.COMMAND_DsspAsn_set
    __swig_getmethods__["DsspAsn"] = _stride.COMMAND_DsspAsn_get
    if _newclass:DsspAsn = _swig_property(_stride.COMMAND_DsspAsn_get, _stride.COMMAND_DsspAsn_set)
    __swig_setmethods__["MolScript"] = _stride.COMMAND_MolScript_set
    __swig_getmethods__["MolScript"] = _stride.COMMAND_MolScript_get
    if _newclass:MolScript = _swig_property(_stride.COMMAND_MolScript_get, _stride.COMMAND_MolScript_set)
    __swig_setmethods__["OutSeq"] = _stride.COMMAND_OutSeq_set
    __swig_getmethods__["OutSeq"] = _stride.COMMAND_OutSeq_get
    if _newclass:OutSeq = _swig_property(_stride.COMMAND_OutSeq_get, _stride.COMMAND_OutSeq_set)
    __swig_setmethods__["Stringent"] = _stride.COMMAND_Stringent_set
    __swig_getmethods__["Stringent"] = _stride.COMMAND_Stringent_get
    if _newclass:Stringent = _swig_property(_stride.COMMAND_Stringent_get, _stride.COMMAND_Stringent_set)
    __swig_setmethods__["Measure"] = _stride.COMMAND_Measure_set
    __swig_getmethods__["Measure"] = _stride.COMMAND_Measure_get
    if _newclass:Measure = _swig_property(_stride.COMMAND_Measure_get, _stride.COMMAND_Measure_set)
    __swig_setmethods__["Shrink"] = _stride.COMMAND_Shrink_set
    __swig_getmethods__["Shrink"] = _stride.COMMAND_Shrink_get
    if _newclass:Shrink = _swig_property(_stride.COMMAND_Shrink_get, _stride.COMMAND_Shrink_set)
    __swig_setmethods__["CarteFile"] = _stride.COMMAND_CarteFile_set
    __swig_getmethods__["CarteFile"] = _stride.COMMAND_CarteFile_get
    if _newclass:CarteFile = _swig_property(_stride.COMMAND_CarteFile_get, _stride.COMMAND_CarteFile_set)
    __swig_setmethods__["MapFile"] = _stride.COMMAND_MapFile_set
    __swig_getmethods__["MapFile"] = _stride.COMMAND_MapFile_get
    if _newclass:MapFile = _swig_property(_stride.COMMAND_MapFile_get, _stride.COMMAND_MapFile_set)
    __swig_setmethods__["MathFile"] = _stride.COMMAND_MathFile_set
    __swig_getmethods__["MathFile"] = _stride.COMMAND_MathFile_get
    if _newclass:MathFile = _swig_property(_stride.COMMAND_MathFile_get, _stride.COMMAND_MathFile_set)
    __swig_setmethods__["AsnSource"] = _stride.COMMAND_AsnSource_set
    __swig_getmethods__["AsnSource"] = _stride.COMMAND_AsnSource_get
    if _newclass:AsnSource = _swig_property(_stride.COMMAND_AsnSource_get, _stride.COMMAND_AsnSource_set)
    __swig_setmethods__["Mode"] = _stride.COMMAND_Mode_set
    __swig_getmethods__["Mode"] = _stride.COMMAND_Mode_get
    if _newclass:Mode = _swig_property(_stride.COMMAND_Mode_get, _stride.COMMAND_Mode_set)
    __swig_setmethods__["SecStrType"] = _stride.COMMAND_SecStrType_set
    __swig_getmethods__["SecStrType"] = _stride.COMMAND_SecStrType_get
    if _newclass:SecStrType = _swig_property(_stride.COMMAND_SecStrType_get, _stride.COMMAND_SecStrType_set)
    __swig_setmethods__["FilterOrder"] = _stride.COMMAND_FilterOrder_set
    __swig_getmethods__["FilterOrder"] = _stride.COMMAND_FilterOrder_get
    if _newclass:FilterOrder = _swig_property(_stride.COMMAND_FilterOrder_get, _stride.COMMAND_FilterOrder_set)
    __swig_setmethods__["NStepA"] = _stride.COMMAND_NStepA_set
    __swig_getmethods__["NStepA"] = _stride.COMMAND_NStepA_get
    if _newclass:NStepA = _swig_property(_stride.COMMAND_NStepA_get, _stride.COMMAND_NStepA_set)
    __swig_setmethods__["NStepB"] = _stride.COMMAND_NStepB_set
    __swig_getmethods__["NStepB"] = _stride.COMMAND_NStepB_get
    if _newclass:NStepB = _swig_property(_stride.COMMAND_NStepB_get, _stride.COMMAND_NStepB_set)
    __swig_setmethods__["NStepC"] = _stride.COMMAND_NStepC_set
    __swig_getmethods__["NStepC"] = _stride.COMMAND_NStepC_get
    if _newclass:NStepC = _swig_property(_stride.COMMAND_NStepC_get, _stride.COMMAND_NStepC_set)
    __swig_setmethods__["NStepD"] = _stride.COMMAND_NStepD_set
    __swig_getmethods__["NStepD"] = _stride.COMMAND_NStepD_get
    if _newclass:NStepD = _swig_property(_stride.COMMAND_NStepD_get, _stride.COMMAND_NStepD_set)
    __swig_setmethods__["Treshold_From_A"] = _stride.COMMAND_Treshold_From_A_set
    __swig_getmethods__["Treshold_From_A"] = _stride.COMMAND_Treshold_From_A_get
    if _newclass:Treshold_From_A = _swig_property(_stride.COMMAND_Treshold_From_A_get, _stride.COMMAND_Treshold_From_A_set)
    __swig_setmethods__["Treshold_To_A"] = _stride.COMMAND_Treshold_To_A_set
    __swig_getmethods__["Treshold_To_A"] = _stride.COMMAND_Treshold_To_A_get
    if _newclass:Treshold_To_A = _swig_property(_stride.COMMAND_Treshold_To_A_get, _stride.COMMAND_Treshold_To_A_set)
    __swig_setmethods__["StepA"] = _stride.COMMAND_StepA_set
    __swig_getmethods__["StepA"] = _stride.COMMAND_StepA_get
    if _newclass:StepA = _swig_property(_stride.COMMAND_StepA_get, _stride.COMMAND_StepA_set)
    __swig_setmethods__["Treshold_From_B"] = _stride.COMMAND_Treshold_From_B_set
    __swig_getmethods__["Treshold_From_B"] = _stride.COMMAND_Treshold_From_B_get
    if _newclass:Treshold_From_B = _swig_property(_stride.COMMAND_Treshold_From_B_get, _stride.COMMAND_Treshold_From_B_set)
    __swig_setmethods__["Treshold_To_B"] = _stride.COMMAND_Treshold_To_B_set
    __swig_getmethods__["Treshold_To_B"] = _stride.COMMAND_Treshold_To_B_get
    if _newclass:Treshold_To_B = _swig_property(_stride.COMMAND_Treshold_To_B_get, _stride.COMMAND_Treshold_To_B_set)
    __swig_setmethods__["StepB"] = _stride.COMMAND_StepB_set
    __swig_getmethods__["StepB"] = _stride.COMMAND_StepB_get
    if _newclass:StepB = _swig_property(_stride.COMMAND_StepB_get, _stride.COMMAND_StepB_set)
    __swig_setmethods__["Treshold_From_C"] = _stride.COMMAND_Treshold_From_C_set
    __swig_getmethods__["Treshold_From_C"] = _stride.COMMAND_Treshold_From_C_get
    if _newclass:Treshold_From_C = _swig_property(_stride.COMMAND_Treshold_From_C_get, _stride.COMMAND_Treshold_From_C_set)
    __swig_setmethods__["Treshold_To_C"] = _stride.COMMAND_Treshold_To_C_set
    __swig_getmethods__["Treshold_To_C"] = _stride.COMMAND_Treshold_To_C_get
    if _newclass:Treshold_To_C = _swig_property(_stride.COMMAND_Treshold_To_C_get, _stride.COMMAND_Treshold_To_C_set)
    __swig_setmethods__["StepC"] = _stride.COMMAND_StepC_set
    __swig_getmethods__["StepC"] = _stride.COMMAND_StepC_get
    if _newclass:StepC = _swig_property(_stride.COMMAND_StepC_get, _stride.COMMAND_StepC_set)
    __swig_setmethods__["Treshold_From_D"] = _stride.COMMAND_Treshold_From_D_set
    __swig_getmethods__["Treshold_From_D"] = _stride.COMMAND_Treshold_From_D_get
    if _newclass:Treshold_From_D = _swig_property(_stride.COMMAND_Treshold_From_D_get, _stride.COMMAND_Treshold_From_D_set)
    __swig_setmethods__["Treshold_To_D"] = _stride.COMMAND_Treshold_To_D_set
    __swig_getmethods__["Treshold_To_D"] = _stride.COMMAND_Treshold_To_D_get
    if _newclass:Treshold_To_D = _swig_property(_stride.COMMAND_Treshold_To_D_get, _stride.COMMAND_Treshold_To_D_set)
    __swig_setmethods__["StepD"] = _stride.COMMAND_StepD_set
    __swig_getmethods__["StepD"] = _stride.COMMAND_StepD_get
    if _newclass:StepD = _swig_property(_stride.COMMAND_StepD_get, _stride.COMMAND_StepD_set)
    def __init__(self, *args): 
        this = _stride.new_COMMAND(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_COMMAND
    __del__ = lambda self : None;
COMMAND_swigregister = _stride.COMMAND_swigregister
COMMAND_swigregister(COMMAND)

class HBOND(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HBOND, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HBOND, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Dnr"] = _stride.HBOND_Dnr_set
    __swig_getmethods__["Dnr"] = _stride.HBOND_Dnr_get
    if _newclass:Dnr = _swig_property(_stride.HBOND_Dnr_get, _stride.HBOND_Dnr_set)
    __swig_setmethods__["Acc"] = _stride.HBOND_Acc_set
    __swig_getmethods__["Acc"] = _stride.HBOND_Acc_get
    if _newclass:Acc = _swig_property(_stride.HBOND_Acc_get, _stride.HBOND_Acc_set)
    __swig_setmethods__["ExistPolarInter"] = _stride.HBOND_ExistPolarInter_set
    __swig_getmethods__["ExistPolarInter"] = _stride.HBOND_ExistPolarInter_get
    if _newclass:ExistPolarInter = _swig_property(_stride.HBOND_ExistPolarInter_get, _stride.HBOND_ExistPolarInter_set)
    __swig_setmethods__["ExistHydrBondRose"] = _stride.HBOND_ExistHydrBondRose_set
    __swig_getmethods__["ExistHydrBondRose"] = _stride.HBOND_ExistHydrBondRose_get
    if _newclass:ExistHydrBondRose = _swig_property(_stride.HBOND_ExistHydrBondRose_get, _stride.HBOND_ExistHydrBondRose_set)
    __swig_setmethods__["ExistHydrBondBaker"] = _stride.HBOND_ExistHydrBondBaker_set
    __swig_getmethods__["ExistHydrBondBaker"] = _stride.HBOND_ExistHydrBondBaker_get
    if _newclass:ExistHydrBondBaker = _swig_property(_stride.HBOND_ExistHydrBondBaker_get, _stride.HBOND_ExistHydrBondBaker_set)
    __swig_setmethods__["Energy"] = _stride.HBOND_Energy_set
    __swig_getmethods__["Energy"] = _stride.HBOND_Energy_get
    if _newclass:Energy = _swig_property(_stride.HBOND_Energy_get, _stride.HBOND_Energy_set)
    __swig_setmethods__["Er"] = _stride.HBOND_Er_set
    __swig_getmethods__["Er"] = _stride.HBOND_Er_get
    if _newclass:Er = _swig_property(_stride.HBOND_Er_get, _stride.HBOND_Er_set)
    __swig_setmethods__["Et"] = _stride.HBOND_Et_set
    __swig_getmethods__["Et"] = _stride.HBOND_Et_get
    if _newclass:Et = _swig_property(_stride.HBOND_Et_get, _stride.HBOND_Et_set)
    __swig_setmethods__["Ep"] = _stride.HBOND_Ep_set
    __swig_getmethods__["Ep"] = _stride.HBOND_Ep_get
    if _newclass:Ep = _swig_property(_stride.HBOND_Ep_get, _stride.HBOND_Ep_set)
    __swig_setmethods__["ti"] = _stride.HBOND_ti_set
    __swig_getmethods__["ti"] = _stride.HBOND_ti_get
    if _newclass:ti = _swig_property(_stride.HBOND_ti_get, _stride.HBOND_ti_set)
    __swig_setmethods__["to"] = _stride.HBOND_to_set
    __swig_getmethods__["to"] = _stride.HBOND_to_get
    if _newclass:to = _swig_property(_stride.HBOND_to_get, _stride.HBOND_to_set)
    __swig_setmethods__["p"] = _stride.HBOND_p_set
    __swig_getmethods__["p"] = _stride.HBOND_p_get
    if _newclass:p = _swig_property(_stride.HBOND_p_get, _stride.HBOND_p_set)
    __swig_setmethods__["AccDonDist"] = _stride.HBOND_AccDonDist_set
    __swig_getmethods__["AccDonDist"] = _stride.HBOND_AccDonDist_get
    if _newclass:AccDonDist = _swig_property(_stride.HBOND_AccDonDist_get, _stride.HBOND_AccDonDist_set)
    __swig_setmethods__["OHDist"] = _stride.HBOND_OHDist_set
    __swig_getmethods__["OHDist"] = _stride.HBOND_OHDist_get
    if _newclass:OHDist = _swig_property(_stride.HBOND_OHDist_get, _stride.HBOND_OHDist_set)
    __swig_setmethods__["AngNHO"] = _stride.HBOND_AngNHO_set
    __swig_getmethods__["AngNHO"] = _stride.HBOND_AngNHO_get
    if _newclass:AngNHO = _swig_property(_stride.HBOND_AngNHO_get, _stride.HBOND_AngNHO_set)
    __swig_setmethods__["AngCOH"] = _stride.HBOND_AngCOH_set
    __swig_getmethods__["AngCOH"] = _stride.HBOND_AngCOH_get
    if _newclass:AngCOH = _swig_property(_stride.HBOND_AngCOH_get, _stride.HBOND_AngCOH_set)
    __swig_setmethods__["AccAng"] = _stride.HBOND_AccAng_set
    __swig_getmethods__["AccAng"] = _stride.HBOND_AccAng_get
    if _newclass:AccAng = _swig_property(_stride.HBOND_AccAng_get, _stride.HBOND_AccAng_set)
    __swig_setmethods__["DonAng"] = _stride.HBOND_DonAng_set
    __swig_getmethods__["DonAng"] = _stride.HBOND_DonAng_get
    if _newclass:DonAng = _swig_property(_stride.HBOND_DonAng_get, _stride.HBOND_DonAng_set)
    __swig_setmethods__["AccDonAng"] = _stride.HBOND_AccDonAng_set
    __swig_getmethods__["AccDonAng"] = _stride.HBOND_AccDonAng_get
    if _newclass:AccDonAng = _swig_property(_stride.HBOND_AccDonAng_get, _stride.HBOND_AccDonAng_set)
    __swig_setmethods__["DonAccAng"] = _stride.HBOND_DonAccAng_set
    __swig_getmethods__["DonAccAng"] = _stride.HBOND_DonAccAng_get
    if _newclass:DonAccAng = _swig_property(_stride.HBOND_DonAccAng_get, _stride.HBOND_DonAccAng_set)
    def __init__(self, *args): 
        this = _stride.new_HBOND(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_HBOND
    __del__ = lambda self : None;
HBOND_swigregister = _stride.HBOND_swigregister
HBOND_swigregister(HBOND)

class PATTERN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PATTERN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PATTERN, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Hb1"] = _stride.PATTERN_Hb1_set
    __swig_getmethods__["Hb1"] = _stride.PATTERN_Hb1_get
    if _newclass:Hb1 = _swig_property(_stride.PATTERN_Hb1_get, _stride.PATTERN_Hb1_set)
    __swig_setmethods__["Hb2"] = _stride.PATTERN_Hb2_set
    __swig_getmethods__["Hb2"] = _stride.PATTERN_Hb2_get
    if _newclass:Hb2 = _swig_property(_stride.PATTERN_Hb2_get, _stride.PATTERN_Hb2_set)
    __swig_setmethods__["Nei1"] = _stride.PATTERN_Nei1_set
    __swig_getmethods__["Nei1"] = _stride.PATTERN_Nei1_get
    if _newclass:Nei1 = _swig_property(_stride.PATTERN_Nei1_get, _stride.PATTERN_Nei1_set)
    __swig_setmethods__["Nei2"] = _stride.PATTERN_Nei2_set
    __swig_getmethods__["Nei2"] = _stride.PATTERN_Nei2_get
    if _newclass:Nei2 = _swig_property(_stride.PATTERN_Nei2_get, _stride.PATTERN_Nei2_set)
    __swig_setmethods__["ExistPattern"] = _stride.PATTERN_ExistPattern_set
    __swig_getmethods__["ExistPattern"] = _stride.PATTERN_ExistPattern_get
    if _newclass:ExistPattern = _swig_property(_stride.PATTERN_ExistPattern_get, _stride.PATTERN_ExistPattern_set)
    __swig_setmethods__["Type"] = _stride.PATTERN_Type_set
    __swig_getmethods__["Type"] = _stride.PATTERN_Type_get
    if _newclass:Type = _swig_property(_stride.PATTERN_Type_get, _stride.PATTERN_Type_set)
    def __init__(self, *args): 
        this = _stride.new_PATTERN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_PATTERN
    __del__ = lambda self : None;
PATTERN_swigregister = _stride.PATTERN_swigregister
PATTERN_swigregister(PATTERN)

class DSSP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSSP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSSP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["File"] = _stride.DSSP_File_set
    __swig_getmethods__["File"] = _stride.DSSP_File_get
    if _newclass:File = _swig_property(_stride.DSSP_File_get, _stride.DSSP_File_set)
    __swig_setmethods__["Id"] = _stride.DSSP_Id_set
    __swig_getmethods__["Id"] = _stride.DSSP_Id_get
    if _newclass:Id = _swig_property(_stride.DSSP_Id_get, _stride.DSSP_Id_set)
    __swig_setmethods__["NRes"] = _stride.DSSP_NRes_set
    __swig_getmethods__["NRes"] = _stride.DSSP_NRes_get
    if _newclass:NRes = _swig_property(_stride.DSSP_NRes_get, _stride.DSSP_NRes_set)
    __swig_setmethods__["ResType"] = _stride.DSSP_ResType_set
    __swig_getmethods__["ResType"] = _stride.DSSP_ResType_get
    if _newclass:ResType = _swig_property(_stride.DSSP_ResType_get, _stride.DSSP_ResType_set)
    __swig_setmethods__["SecondStr"] = _stride.DSSP_SecondStr_set
    __swig_getmethods__["SecondStr"] = _stride.DSSP_SecondStr_get
    if _newclass:SecondStr = _swig_property(_stride.DSSP_SecondStr_get, _stride.DSSP_SecondStr_set)
    __swig_setmethods__["PDB_ResNumb"] = _stride.DSSP_PDB_ResNumb_set
    __swig_getmethods__["PDB_ResNumb"] = _stride.DSSP_PDB_ResNumb_get
    if _newclass:PDB_ResNumb = _swig_property(_stride.DSSP_PDB_ResNumb_get, _stride.DSSP_PDB_ResNumb_set)
    __swig_setmethods__["Accessibility"] = _stride.DSSP_Accessibility_set
    __swig_getmethods__["Accessibility"] = _stride.DSSP_Accessibility_get
    if _newclass:Accessibility = _swig_property(_stride.DSSP_Accessibility_get, _stride.DSSP_Accessibility_set)
    def __init__(self, *args): 
        this = _stride.new_DSSP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_DSSP
    __del__ = lambda self : None;
DSSP_swigregister = _stride.DSSP_swigregister
DSSP_swigregister(DSSP)

class QUALITY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QUALITY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QUALITY, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TP"] = _stride.QUALITY_TP_set
    __swig_getmethods__["TP"] = _stride.QUALITY_TP_get
    if _newclass:TP = _swig_property(_stride.QUALITY_TP_get, _stride.QUALITY_TP_set)
    __swig_setmethods__["TN"] = _stride.QUALITY_TN_set
    __swig_getmethods__["TN"] = _stride.QUALITY_TN_get
    if _newclass:TN = _swig_property(_stride.QUALITY_TN_get, _stride.QUALITY_TN_set)
    __swig_setmethods__["FP"] = _stride.QUALITY_FP_set
    __swig_getmethods__["FP"] = _stride.QUALITY_FP_get
    if _newclass:FP = _swig_property(_stride.QUALITY_FP_get, _stride.QUALITY_FP_set)
    __swig_setmethods__["FN"] = _stride.QUALITY_FN_set
    __swig_getmethods__["FN"] = _stride.QUALITY_FN_get
    if _newclass:FN = _swig_property(_stride.QUALITY_FN_get, _stride.QUALITY_FN_set)
    __swig_setmethods__["Corr"] = _stride.QUALITY_Corr_set
    __swig_getmethods__["Corr"] = _stride.QUALITY_Corr_get
    if _newclass:Corr = _swig_property(_stride.QUALITY_Corr_get, _stride.QUALITY_Corr_set)
    __swig_setmethods__["Perc"] = _stride.QUALITY_Perc_set
    __swig_getmethods__["Perc"] = _stride.QUALITY_Perc_get
    if _newclass:Perc = _swig_property(_stride.QUALITY_Perc_get, _stride.QUALITY_Perc_set)
    def __init__(self, *args): 
        this = _stride.new_QUALITY(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_QUALITY
    __del__ = lambda self : None;
QUALITY_swigregister = _stride.QUALITY_swigregister
QUALITY_swigregister(QUALITY)

class STRIDE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STRIDE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STRIDE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Chain"] = _stride.STRIDE_Chain_set
    __swig_getmethods__["Chain"] = _stride.STRIDE_Chain_get
    if _newclass:Chain = _swig_property(_stride.STRIDE_Chain_get, _stride.STRIDE_Chain_set)
    __swig_setmethods__["HBond"] = _stride.STRIDE_HBond_set
    __swig_getmethods__["HBond"] = _stride.STRIDE_HBond_get
    if _newclass:HBond = _swig_property(_stride.STRIDE_HBond_get, _stride.STRIDE_HBond_set)
    __swig_setmethods__["Cmd"] = _stride.STRIDE_Cmd_set
    __swig_getmethods__["Cmd"] = _stride.STRIDE_Cmd_get
    if _newclass:Cmd = _swig_property(_stride.STRIDE_Cmd_get, _stride.STRIDE_Cmd_set)
    __swig_setmethods__["NChain"] = _stride.STRIDE_NChain_set
    __swig_getmethods__["NChain"] = _stride.STRIDE_NChain_get
    if _newclass:NChain = _swig_property(_stride.STRIDE_NChain_get, _stride.STRIDE_NChain_set)
    __swig_setmethods__["NHBond"] = _stride.STRIDE_NHBond_set
    __swig_getmethods__["NHBond"] = _stride.STRIDE_NHBond_get
    if _newclass:NHBond = _swig_property(_stride.STRIDE_NHBond_get, _stride.STRIDE_NHBond_set)
    __swig_setmethods__["ValidChain"] = _stride.STRIDE_ValidChain_set
    __swig_getmethods__["ValidChain"] = _stride.STRIDE_ValidChain_get
    if _newclass:ValidChain = _swig_property(_stride.STRIDE_ValidChain_get, _stride.STRIDE_ValidChain_set)
    def __init__(self, *args): 
        this = _stride.new_STRIDE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stride.delete_STRIDE
    __del__ = lambda self : None;
    def getChain(*args): return _stride.STRIDE_getChain(*args)
    def getHBond(*args): return _stride.STRIDE_getHBond(*args)
    def run(*args): return _stride.STRIDE_run(*args)
    def ReadPDBFile(*args): return _stride.STRIDE_ReadPDBFile(*args)
    def getPDBRecords(*args): return _stride.STRIDE_getPDBRecords(*args)
STRIDE_swigregister = _stride.STRIDE_swigregister
STRIDE_swigregister(STRIDE)



